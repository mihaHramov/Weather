apply plugin: 'com.android.application'
apply from: '../buildsystem/android_commons.gradle'
apply plugin: "org.sonarqube"
android {
    defaultConfig {
        applicationId "com.aaa.bbb.ccc.weather"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
sonarqube {
    properties {
        property "sonar.projectKey", "mihaHramov_Weather"
        property "sonar.organization", "mihahramov"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", "03adaaa781581f1c181306b5436f81b733f1cddb"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.projectName", "Weather"
        property "sonar.reportPath", "${project.buildDir}/sonarqube/test.exec"
        property "sonar.projectBaseDir", "$rootDir"
        property "sonar.sources", "."
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", ""
        property "sonar.language", "java"
        property "sonar.coverage.exclusions", "**/src/androidTest/**, **/src/test/**"
        property "sonar.coverage.jacoco.xmlReportPaths", fileTree(includes:["**/*Jacoco*.xml"] , dir: "$rootDir/app/build/reports/jacoco").collect()
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    rootProject.app.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.annotationProcessorsDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.unitTestsDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }
    rootProject.instrumentationTestsDependencies.each { item ->
        add(item.configuration, item.dependency, item.options)
    }

    //module
    implementation project(path: ':data')
    implementation project(path: ':domain')

    configurations.matching { it.name == '_internal_aapt2_binary' }.all { config ->
        config.resolutionStrategy.eachDependency { details ->
            details.useVersion("3.3.2-5309881")
        }
    }
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'